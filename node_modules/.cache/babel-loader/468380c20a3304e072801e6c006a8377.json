{"ast":null,"code":"import \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.json.stringify.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'loginPage',\n  data: function data() {\n    /* DATA */\n    return {\n      mail: 'Adresse email',\n      password: 'Mot de passe',\n      affichMdp: 'Aperçu du mot de passe',\n      messageMdp: '',\n      numberAffichMsg: true,\n\n      /* Permet d'afficher le button de connexion ou non --- Null par défaut -- Vérification par regexp */\n      validLogin: null,\n      buttonLogin: false,\n\n      /* Permet d'afficher le button de connexion ou non --- Null par défaut -- Vérification par regexp */\n\n      /* Permet d'afficher une erreur ou une confirmation des regexp */\n      regexpBoolMail: null,\n      regexpBoolPassword: null,\n\n      /* Permet d'afficher une erreur ou une confirmation des regexp */\n\n      /* Permet d'accéder à la page forum si true */\n      connexionUser: false,\n\n      /* Permet d'accéder à la page forum si true */\n\n      /* Regexp  connexion */\n      passwordRegExp: new RegExp(\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})\"),\n      emailRegExp: new RegExp(/^[\\w-.]+@([\\w-]+.)+[\\w-]{2,4}$/i)\n      /* Regexp  connexion */\n\n    };\n    /* DATA */\n  },\n  methods: {\n    /* Permet d'afficher le mot de passe au click */\n    affichPassword: function affichPassword() {\n      /* IF qui permet de passer de l'était password à l'état text pour afficher le mot de passe */\n      if (this.numberAffichMsg === false) {\n        this.numberAffichMsg = true;\n        document.getElementById('password-login').setAttribute(\"type\", \"password\");\n      } else {\n        this.numberAffichMsg = false;\n        document.getElementById('password-login').setAttribute(\"type\", \"text\");\n      }\n      /* IF qui permet de passer de l'était password à l'état text pour afficher le mot de passe */\n\n    },\n\n    /* Permet d'afficher le mot de passe au click */\n\n    /* Permet de vérifier les données rentrée par l'utilisateur */\n    verifRegexp: function verifRegexp() {\n      /* Vérifie si le regexp n'est pas valid et ajoute un texte indiquant d'ou vien l'erreur */\n      var mailLogin = document.getElementById('email-login');\n      var passwordLogin = document.getElementById('password-login');\n      if (this.emailRegExp.test(mailLogin.value.trim()) ? this.regexpBoolMail = true : this.regexpBoolMail = false) ;\n      if (this.passwordRegExp.test(passwordLogin.value.trim()) ? this.regexpBoolPassword = true : this.regexpBoolPassword = false) ;\n      /* Vérifie si le regexp n'est pas valid et ajoute un texte indiquant d'ou vien l'erreur */\n\n      /* Affiche le bouton si le regexp est valide sinon le retire */\n\n      if (this.regexpBoolMail === true && this.regexpBoolPassword === true) {\n        this.buttonLogin = true;\n      }\n\n      if (this.regexpBoolMail === false || this.regexpBoolPassword === false) {\n        this.buttonLogin = false;\n      }\n      /* Affiche le bouton si le regexp est valide sinon le retire */\n\n    },\n\n    /* Permet de vérifier les données rentrée par l'utilisateur */\n\n    /* Fonction qui envoie les données rentrer par l'utilisateur, sous condition que les regexp soit valider  */\n    sendLogin: function sendLogin() {\n      var _this = this;\n\n      /* Enregistre les données rentrer par l'user dans une variable si le regexp est valide */\n      if (this.regexpBoolMail === true && this.regexpBoolPassword === true) {\n        /* Enregistre les valeur dans la variable */\n        var loginCheck = {\n          Email: document.querySelector('#email-login').value,\n          Password: document.querySelector('#password-login').value\n        };\n        /* Enregistre les valeur dans la variable */\n\n        /* Requête qui envoie les données rentrer par l'utilisateur à la BDD */\n\n        fetch('http://localhost:3000/api/auth/login', {\n          method: \"POST\",\n          headers: {\n            'Accept': 'application/json',\n            'Content-type': 'application/json'\n          },\n          body: JSON.stringify(loginCheck)\n        })\n        /* Requête qui envoie les données rentrer par l'utilisateur à la BDD */\n\n        /* Réponse de l'api si mot de passe ou email incorrect renvoie une erreur sinon connecte l'user */\n        .then(function (res) {\n          return res.json();\n        }).then(function (login) {\n          if (login.userId === undefined) {\n            _this.validLogin = false;\n            setTimeout(function () {\n              _this.validLogin = null;\n              return false;\n            }, 3000);\n          } else {\n            _this.validLogin = true;\n            setTimeout(function () {\n              window.location.assign(\"http://localhost:8080/fil\");\n              sessionStorage.setItem('user', JSON.stringify(login));\n              location.reload();\n            }, 2000);\n            /* Réponse de l'api si mot de passe ou email incorrect renvoie une erreur sinon connecte l'user */\n          }\n        });\n      }\n    }\n  }\n};\n/* Fonction qui envoie les données rentrer par l'utilisateur, sous condition que les regexp soit valider  */","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0FA;AACAA,mBADA;AAEAC,MAFA,kBAEA;AAEA;AACA;AAEAC,2BAFA;AAGAC,8BAHA;AAIAC,yCAJA;AAKAC,oBALA;AAMAC,2BANA;;AAQA;AACAC,sBATA;AAUAC,wBAVA;;AAWA;;AAEA;AACAC,0BAdA;AAeAC,8BAfA;;AAgBA;;AAEA;AACAC,0BAnBA;;AAoBA;;AAEA;AACAC,+FAvBA;AAwBAC;AACA;;AAzBA;AA4BA;AACA,GAlCA;AAmCAC;AACA;AACAC,kBAFA,4BAEA;AAEA;AACA;AACA;AACAC;AACA,OAHA,MAGA;AACA;AACAA;AACA;AACA;;AAEA,KAdA;;AAeA;;AAEA;AACAC,eAlBA,yBAkBA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AAEA,KArCA;;AAsCA;;AAEA;AACAC,aAzCA,uBAyCA;AAAA;;AAEA;AACA;AAEA;AACA;AACAC,6DADA;AAEAC;AAFA;AAIA;;AAEA;;AACAC;AACAC,wBADA;AAEAC;AACA,wCADA;AAEA;AAFA,WAFA;AAMAC;AANA;AAQA;;AAEA;AAVA,SAWAC,IAXA,CAWA;AAAA;AAAA,SAXA,EAYAA,IAZA,CAYA;AACA;AACA;AACAC;AACA;AACA;AACA,aAHA,EAGA,IAHA;AAIA,WANA,MAMA;AACA;AACAA;AACAC;AACAC;AACAC;AACA,aAJA,EAIA,IAJA;AAKA;AACA;AACA,SA5BA;AA8BA;AACA;AArFA;AAnCA;AA2HA","names":["name","data","mail","password","affichMdp","messageMdp","numberAffichMsg","validLogin","buttonLogin","regexpBoolMail","regexpBoolPassword","connexionUser","passwordRegExp","emailRegExp","methods","affichPassword","document","verifRegexp","sendLogin","Email","Password","fetch","method","headers","body","then","setTimeout","window","sessionStorage","location"],"sourceRoot":"src/components/Log","sources":["loginPage.vue"],"sourcesContent":["<template>\n  <div id=\"table-column\">\n    <div class=\"mb-3\">\n\n        <!-- Gestion de la connexion -->\n\n        <!-- Input-Label de l'adresse mail avec regexp -->\n      <label for=\"email-login\" id=\"fontText\" class=\"form-label\">{{mail}}</label>\n\n      <div class=\"icoDiv\">\n        <input\n          type=\"email\"\n          class=\"template-login-signup\"\n          id=\"email-login\"\n          @keyup=\"verifRegexp\"\n          placeholder=\"Groupomania@example.com\"\n        />\n        <font-awesome-icon\n          icon=\"fa-solid fa-triangle-exclamation\"\n          class=\"exclamationRegexp\"\n          v-show=\"regexpBoolMail === false\"\n        />\n        <font-awesome-icon\n          icon=\"fa-solid fa-check\"\n          class=\"validCheckRegexp\"\n          v-show=\"regexpBoolMail === true\"\n        />\n      </div>\n      <!-- Input-Label de l'adresse mail avec regexp -->\n\n      <!-- Input-Label du password avec regexp et affichage du mot de passe par button -->\n      <label\n        for=\"password-login\"\n        id=\"fontText\"\n        class=\"form-label\"\n        >{{password}}</label\n      >\n\n      <div class=\"icoDiv\">\n        <input\n          type=\"password\"\n          class=\"template-login-signup\"\n          @keyup=\"verifRegexp\"\n          id=\"password-login\"\n          placeholder=\"Groupomania\"\n        />\n        <font-awesome-icon\n          @click=\"affichPassword\"\n          icon=\"fa-solid fa-eye-low-vision\"\n          class=\"validCheckRegexp\"\n        />\n        <font-awesome-icon\n          icon=\"fa-solid fa-triangle-exclamation\"\n          class=\"exclamationRegexpLogin\"\n          v-show=\"regexpBoolPassword === false\"\n        />\n        <font-awesome-icon\n          icon=\"fa-solid fa-check\"\n          class=\"validRegexpLogin\"\n          v-show=\"regexpBoolPassword === true\"\n        />\n      </div>\n       <!-- Input-Label du password avec regexp et affichage du mot de passe par button -->\n\n      <!-- Input d'envoie des données -->\n      <input\n        @click=\"sendLogin\"\n        href=\"/espaceUser\"\n        v-show=\"buttonLogin === true\"\n        class=\"button-loginSignup\"\n        id=\"buttonLoginSignup\"\n        type=\"submit\"\n        value=\"Confirmer\"\n      />\n       <!-- Input d'envoie des données -->\n\n      <!-- Message de confirmation ou d'erreur -->\n      <p class=\"validColor\" v-show=\"validLogin === true\">Connexion Réussie !</p>\n      <p class=\"errorColor\" v-show=\"validLogin === false\">\n        L'adresse mail ou le mot de passe est incorrect !\n      </p>\n       <!-- Message de confirmation ou d'erreur -->\n\n      <!-- Gestion de la connexion -->\n      \n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n   name:'loginPage',\ndata(){\n\n   /* DATA */\n    return{\n\n   mail: 'Adresse email',\n   password:'Mot de passe',\n   affichMdp: 'Aperçu du mot de passe',\n   messageMdp: '',\n   numberAffichMsg: true,\n\n   /* Permet d'afficher le button de connexion ou non --- Null par défaut -- Vérification par regexp */\n   validLogin: null,\n   buttonLogin: false,\n   /* Permet d'afficher le button de connexion ou non --- Null par défaut -- Vérification par regexp */\n\n   /* Permet d'afficher une erreur ou une confirmation des regexp */\n   regexpBoolMail: null,\n   regexpBoolPassword: null,\n   /* Permet d'afficher une erreur ou une confirmation des regexp */\n\n   /* Permet d'accéder à la page forum si true */\n   connexionUser : false,\n   /* Permet d'accéder à la page forum si true */\n\n   /* Regexp  connexion */\n   passwordRegExp : new RegExp(`^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})`),\n   emailRegExp : new RegExp (/^[\\w-.]+@([\\w-]+.)+[\\w-]{2,4}$/i),\n   /* Regexp  connexion */\n \n    }\n   /* DATA */\n},\n methods: {\n     /* Permet d'afficher le mot de passe au click */\n    affichPassword() {\n\n         /* IF qui permet de passer de l'était password à l'état text pour afficher le mot de passe */\n        if (this.numberAffichMsg === false) {\n            this.numberAffichMsg = true;\n            document.getElementById('password-login').setAttribute(\"type\", \"password\");\n        } else {\n            this.numberAffichMsg = false;\n            document.getElementById('password-login').setAttribute(\"type\", \"text\");\n        }\n         /* IF qui permet de passer de l'était password à l'état text pour afficher le mot de passe */\n\n    },\n     /* Permet d'afficher le mot de passe au click */\n\n   /* Permet de vérifier les données rentrée par l'utilisateur */\n    verifRegexp() {\n\n         /* Vérifie si le regexp n'est pas valid et ajoute un texte indiquant d'ou vien l'erreur */\n        let mailLogin = document.getElementById('email-login');\n        let passwordLogin = document.getElementById('password-login');\n\n        if (this.emailRegExp.test(mailLogin.value.trim()) ? this.regexpBoolMail = true : this.regexpBoolMail = false);\n        if (this.passwordRegExp.test(passwordLogin.value.trim()) ? this.regexpBoolPassword = true : this.regexpBoolPassword = false);\n        /* Vérifie si le regexp n'est pas valid et ajoute un texte indiquant d'ou vien l'erreur */\n       \n       /* Affiche le bouton si le regexp est valide sinon le retire */\n        if (this.regexpBoolMail === true && this.regexpBoolPassword === true) {\n            this.buttonLogin = true;\n        }\n        if (this.regexpBoolMail === false || this.regexpBoolPassword === false) {\n            this.buttonLogin = false;\n        }\n         /* Affiche le bouton si le regexp est valide sinon le retire */\n\n    },\n     /* Permet de vérifier les données rentrée par l'utilisateur */\n\n    /* Fonction qui envoie les données rentrer par l'utilisateur, sous condition que les regexp soit valider  */\n    sendLogin() {\n \n     /* Enregistre les données rentrer par l'user dans une variable si le regexp est valide */\n        if (this.regexpBoolMail === true && this.regexpBoolPassword === true) {\n\n            /* Enregistre les valeur dans la variable */\n            let loginCheck = {\n                Email: document.querySelector('#email-login').value,\n                Password: document.querySelector('#password-login').value\n            };\n            /* Enregistre les valeur dans la variable */\n\n           /* Requête qui envoie les données rentrer par l'utilisateur à la BDD */\n            fetch('http://localhost:3000/api/auth/login', {\n                    method: \"POST\",\n                    headers: {\n                        'Accept': 'application/json',\n                        'Content-type': 'application/json'\n                    },\n                    body: JSON.stringify(loginCheck)\n                })\n           /* Requête qui envoie les données rentrer par l'utilisateur à la BDD */\n\n           /* Réponse de l'api si mot de passe ou email incorrect renvoie une erreur sinon connecte l'user */\n                .then(res => res.json())\n                .then(login => {\n                    if (login.userId === undefined) {\n                        this.validLogin = false;\n                        setTimeout(() => {\n                            this.validLogin = null;\n                            return false;\n                        }, 3000)\n                    } else {\n                        this.validLogin = true;\n                        setTimeout(() => {\n                            window.location.assign(`http://localhost:8080/fil`)\n                            sessionStorage.setItem('user', JSON.stringify(login));\n                            location.reload();\n                        }, 2000)\n            /* Réponse de l'api si mot de passe ou email incorrect renvoie une erreur sinon connecte l'user */\n                    }\n                })\n\n        }\n    }\n}\n}\n/* Fonction qui envoie les données rentrer par l'utilisateur, sous condition que les regexp soit valider  */\n\n</script>\n\n<style>\n#fontText{margin-top:3%;font-family:Raleway,sans-serif;font-size:1.2rem}#buttonLoginSignup,#buttonLoginSignup2{margin-top:5%;border:2px solid #fff;border-radius:15px/20px;background-color:#fff;font-family:Raleway,sans-serif;font-size:1.2rem;padding:1% 5%;cursor:grab}#buttonLoginSignup2:hover,#buttonLoginSignup:hover,.buttonUpdateImg:hover,.commPostGet:hover,.deletePost:hover,.modifButtonPostTest:hover,.modifButtonUser:hover,.modifyPostGet:hover,.nav-li:hover,.suppButtonUser:hover,.updateButtonUser:hover{transform:scale(1.1);transition:1.5s}#table-column{width:100%;display:flex;align-items:center;justify-content:center;padding-top:10%}.errorMsg{color:red;font-family:Raleway,sans-serif;margin-top:15px;font-size:1.5rem}.mb-3{color:#fff;padding-top:5%;width:50%;padding-bottom:5%;border-radius:15px;display:flex;flex-direction:column;align-items:center;background-size:800%;background-image:url(\"../../assets/background-login.webp\")}.template-login-signup{width:50%;margin-top:15px;text-align:center;font-family:Raleway,sans-serif;font-size:1.2rem}.errorColor{margin-top:5%;text-align:center;width:50%;color:orange;font-family:Raleway,sans-serif;font-size:2rem}.validColor{margin-top:5%;text-align:center;width:50%;color:#90ee90;font-family:Raleway,sans-serif;font-size:2rem}.validCheckRegexp{width:25px;height:26px;color:green;position:absolute;top:38%;right:25%;cursor:grab}.eyesPassword{cursor:grab}.exclamationRegexp{width:30px;height:26px;color:red;position:absolute;top:38%;right:25%}.test13{width:30px;height:26px;color:red;position:absolute;top:38%;right:35%}.test12{width:25px;height:26px;color:green;position:absolute;top:38%;right:35%}@media screen and (max-width:1164px){.template-login-signup{width:90%}.exclamationRegexp.svg-inline--fa.fa-triangle-exclamation,.validCheckRegexp.svg-inline--fa.fa-check{right:5%}.validCheckRegexp.svg-inline--fa.fa-eye-low-vision{right:5%}.validRegexpLogin.svg-inline--fa.fa-check,.exclamationRegexpLogin.svg-inline--fa.fa-triangle-exclamation{right:11%}}@media screen and (max-width:768px){.mb-3{padding-top:0;width:80%}}@media screen and (max-width:700px){.nav-li{margin-bottom:15%}.nav-ul-login{width:20%!important;margin-right:5%;flex-direction:column}}@media screen and (max-width:540px){.nav-li{margin-bottom:50%!important}.nav-ul-login{width:10%!important;margin-right:5%!important;flex-direction:column}.mb-3{width:90%}}@media screen and (max-width:430px){.nav-ul-login{margin-right:10%!important}}@media screen and (max-width:375px){.mb-3{width:100%;border-radius:0}#table-column{padding-top:0!important}.template-login-signup{width:95%}.exclamationRegexp.svg-inline--fa.fa-triangle-exclamation,.validCheckRegexp.svg-inline--fa.fa-check{right:2%}.validCheckRegexp.svg-inline--fa.fa-eye-low-vision{right:2%}.validRegexpLogin.svg-inline--fa.fa-check,.exclamationRegexpLogin.svg-inline--fa.fa-triangle-exclamation{right:9%}}\n</style>\n"]},"metadata":{},"sourceType":"module"}